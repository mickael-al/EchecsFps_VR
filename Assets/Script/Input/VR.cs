//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Script/Input/VR.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VR : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VR()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VR"",
    ""maps"": [
        {
            ""name"": ""XRI_Head"",
            ""id"": ""8d2215a8-1531-45e2-96a6-35a829876d92"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""663b3e22-d015-4027-89c9-b23cb28ccc4f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""bad7d85f-1cc1-47a7-bab7-aa1a8df23248"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""97175667-4149-4412-98ce-a14ee08e0ea1"",
                    ""path"": ""<XRHMD>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45d53291-08bf-45d9-a0de-9cf8036b9e3c"",
                    ""path"": ""<XRHMD>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI_HandLeft"",
            ""id"": ""27ca2cd8-ff91-4bd0-9412-24c7886f038c"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""ad1b05cf-2dfb-4435-a459-9db825859b94"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""a7a6b487-f799-4a9a-8c8b-3ff3c5dd5a14"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d442a9a-4ef9-48c6-988b-3678b334284b"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI_HandRight"",
            ""id"": ""3ed9ba19-ada3-43a8-bbf4-c9555a409217"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""b1c249f0-87a3-4a09-89fe-d4dddcb29ed7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""e90bf5af-7642-4a7f-9750-0c7388974515"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""35bdf8ef-3f8c-4506-b3a4-feb573a68345"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XRI_Head
        m_XRI_Head = asset.FindActionMap("XRI_Head", throwIfNotFound: true);
        m_XRI_Head_Position = m_XRI_Head.FindAction("Position", throwIfNotFound: true);
        m_XRI_Head_Rotation = m_XRI_Head.FindAction("Rotation", throwIfNotFound: true);
        // XRI_HandLeft
        m_XRI_HandLeft = asset.FindActionMap("XRI_HandLeft", throwIfNotFound: true);
        m_XRI_HandLeft_Position = m_XRI_HandLeft.FindAction("Position", throwIfNotFound: true);
        m_XRI_HandLeft_Rotation = m_XRI_HandLeft.FindAction("Rotation", throwIfNotFound: true);
        // XRI_HandRight
        m_XRI_HandRight = asset.FindActionMap("XRI_HandRight", throwIfNotFound: true);
        m_XRI_HandRight_Position = m_XRI_HandRight.FindAction("Position", throwIfNotFound: true);
        m_XRI_HandRight_Rotation = m_XRI_HandRight.FindAction("Rotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRI_Head
    private readonly InputActionMap m_XRI_Head;
    private IXRI_HeadActions m_XRI_HeadActionsCallbackInterface;
    private readonly InputAction m_XRI_Head_Position;
    private readonly InputAction m_XRI_Head_Rotation;
    public struct XRI_HeadActions
    {
        private @VR m_Wrapper;
        public XRI_HeadActions(@VR wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_XRI_Head_Position;
        public InputAction @Rotation => m_Wrapper.m_XRI_Head_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_XRI_Head; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRI_HeadActions set) { return set.Get(); }
        public void SetCallbacks(IXRI_HeadActions instance)
        {
            if (m_Wrapper.m_XRI_HeadActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_XRI_HeadActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_XRI_HeadActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_XRI_HeadActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_XRI_HeadActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_XRI_HeadActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_XRI_HeadActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_XRI_HeadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public XRI_HeadActions @XRI_Head => new XRI_HeadActions(this);

    // XRI_HandLeft
    private readonly InputActionMap m_XRI_HandLeft;
    private IXRI_HandLeftActions m_XRI_HandLeftActionsCallbackInterface;
    private readonly InputAction m_XRI_HandLeft_Position;
    private readonly InputAction m_XRI_HandLeft_Rotation;
    public struct XRI_HandLeftActions
    {
        private @VR m_Wrapper;
        public XRI_HandLeftActions(@VR wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_XRI_HandLeft_Position;
        public InputAction @Rotation => m_Wrapper.m_XRI_HandLeft_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_XRI_HandLeft; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRI_HandLeftActions set) { return set.Get(); }
        public void SetCallbacks(IXRI_HandLeftActions instance)
        {
            if (m_Wrapper.m_XRI_HandLeftActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_XRI_HandLeftActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_XRI_HandLeftActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_XRI_HandLeftActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_XRI_HandLeftActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_XRI_HandLeftActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_XRI_HandLeftActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_XRI_HandLeftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public XRI_HandLeftActions @XRI_HandLeft => new XRI_HandLeftActions(this);

    // XRI_HandRight
    private readonly InputActionMap m_XRI_HandRight;
    private IXRI_HandRightActions m_XRI_HandRightActionsCallbackInterface;
    private readonly InputAction m_XRI_HandRight_Position;
    private readonly InputAction m_XRI_HandRight_Rotation;
    public struct XRI_HandRightActions
    {
        private @VR m_Wrapper;
        public XRI_HandRightActions(@VR wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_XRI_HandRight_Position;
        public InputAction @Rotation => m_Wrapper.m_XRI_HandRight_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_XRI_HandRight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRI_HandRightActions set) { return set.Get(); }
        public void SetCallbacks(IXRI_HandRightActions instance)
        {
            if (m_Wrapper.m_XRI_HandRightActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_XRI_HandRightActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_XRI_HandRightActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_XRI_HandRightActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_XRI_HandRightActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_XRI_HandRightActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_XRI_HandRightActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_XRI_HandRightActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public XRI_HandRightActions @XRI_HandRight => new XRI_HandRightActions(this);
    public interface IXRI_HeadActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IXRI_HandLeftActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IXRI_HandRightActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
}
